when to use class components?
-----------------------------
1. this 
2. lifecycle methods

Important-React dom renders only one element.So wrap all components in a div.
---------

Stateless Functional Component
----------------------------------
	definition-
	 x= function() {
		return(
		<h1>blah </h1>
		);
	}

	usage- 
	<x/>

Class Component
------------------

    class Square extends React.Component {
        render() {
            return(
                <h2>Hello</h2>
            )
        }
    }
    <Square>
Styling Stateless Functional Componenet
------------------------------------------
    1. add link

    	add <link rel="stylesheet" href="main.css" >

    2. add class name

        <h2 className="sq">Hello</h2>

    3. normal style sheet format

    .red{
	    height:100px,
	    weight: 100px
    }

React styling inline approach - better approach of above
-------------------------------------------------------------
	Rule No. 1. create javascript object

		var Red = function(){
			var redStyle= {
			    height:100px;
		    	weight: 100px;
			}
			return(
			 <h2 style={redStyle}>Hello</h2>
			 )
		}

	Rule No 2. assign object to attribute of element to style

Styling class components
-------------------------
External styling and internal styling same as the above

Props
-----

Components talk to each other
Way of passing data from parent to child
Unidirectional dat flow- top to down
Immutable data(read only)

State
-----
handles user input

Functional Programming 
----------------------
1. Map
2. Filter

Higher order functions are the functions that return a function or accepts a function as a parameter.
----------------------

Pure function-
-------------
 Given the same input will always return the same output
 produces no side effect
 relies on no extra state

Impure function example- Math.random()
-----------------------

When you render a list of items, react stores some info about each item in the list. If you render a component that has a state, that state needs to be stored and regrdless of how you implement your components, react stores a reference to backing native views.
When you update that list, React needs to determine what has changed..
Key is a special propery that's reserved in React. When an element is created, React puls off the key property and stores the key directly on the returned element
It looks like part of props, it cannot be referenced with "this.props.key"
Key tells the identity of the component.if component changes, key is rerendered

React Events
-------------
same like handling DOM Events
Syntactic Difference -
1. React elements are named using CamelCase rather than lowerCase
2. With JSX you pass a function as event handler, rather than a string.

Naming Convention of Events
---------------------------
1. begin with "on" or "handle"
name the DOM element
2. Name the DOM element
3. Describe the expected action

This and bind
-------------
bind creates a new function that will have this set to the first parameter passed to bind()
func.bind(obj)
usually inside constructor bind is used

React State-
1. React will invoke the props and context of the component
2. To set up a property or access this inside the constructor use super()
3. 

Forms-  https://reactjs.org/docs/forms.html
Controlled Components - https://reactjs.org/docs/forms.html#controlled-components

Ajax-
1. without reloading
2. send and recive data to server
fetch- js method
axios- js library

API
API is a set of routines, protocols and tools  for building software apps. 
Basically, API specifies how software components should interact.

https://swapi.co/

componentDidMount-
1. most commonly used for making ajax calls to load data for your component
2. can set state 



fetch- takes path, returns a promise that resolves to the response to that request whether it is successful or not

Promise object represents eventual completion or failure of a asynchronous operation, and its resulting value



things to remember=
you can render{undefined}
you cannot render object but its childs only 
conditional rendering- 
    if/else
    ternary operator
    logical and

var,let,const
var can be redeclared.

JSX does not have a built in data binding. 
JSX doesnt supports objects. supports arrays, strings, etc
JSX ignores null, boolean or undefined[null,undefined,true]=> renders nothing

Synthetic events-
https://reactjs.org/docs/events.html

this.setState is asynchronous. 
using 2 set state wont work like Synchronously. moreover the dom will chnage with respective t outdated elements. 

react does merge old and new. Uses virtual DOM to chnage only to changed state. 
While using 2 or more set state->
Ideal to use set state with an updater function. 
Example=    this.setState((prevState) => {
            return{
                count: prevState.count - 1
            };
        })
//it'll batch them into one update before rendering

PROPS                                   STATES
-------                                 ---------
An object                               An object
can be used when rendering              can be used when rendering
Changes(from above) cause rerenders     Changes cause re-renders
Comes from above                        Defined in component itself
Cant be changed by Component itself     Can be changed by Component itself

props is generally updates from parent  state is generally updated from event handlers
props has no limitation			state can be used in class components



Default props- 
-------------
can be used for funstional as wells as class components

  Header.defaultProps = {
    title:'Indecision'
  }
REACT DEV tools
---------------
google search- chrome react dev tools

LifeCycle Methods - only available in class components
-----------------
componentDidMount() - this gets fired when the component gets mounted to the DOM

componentDidUpdate()- 
after the state/props values change

componentWillUnmount()- gets fired when the component goes away/disappears

Using local storage
json.stringfy(object) -object to string

JSON.parse() - string to object

WEBPACK- 
---------
Webpack is an asset bundler.
Combine in 3rd party libraries and get a single js file

Module bundler

Allows us to organise our js. ie single js file called bundle
breaking up all the files

absolute path for output, but relative path for entry in the webpack

const path = require('path');

module.exports = {
    entry : './src/app.js',
    output :{
        path: path.join(__dirname, 'public'),
        filename: 'bundle.js'
    }
};

IMPORT / EXPORT
---------------

export two types-  inline as well as the end

export const x = () => {..}; 

or export{x};


Default export
export x as default;
export default (a,b) => a-b; 
//can be used with anonymous functions i.e without name
Named import 
import {x} from 'file';

x();

Default import - no curly braces
import anything from 'file';
anything();

props.children
--------------
{props.children}=  test text;

render({
        <test>
        <p>test text</p>
        </test>
    },app)

ROUTERS IN REACT 
------------------

install react-router-dom

export browserrouter and route;
create routes
modify webpack config. Add historyApiFallback 


REDUX-
Install redux
Why redux?
1. Where do i store my app state in a acomplex react app
2. How do i create components that are actually reusable?

redux is a state container like our class based components
Create a redux store
All the components can chnage/read from the store
Using actions-
Object sent to the store
 all the actions need a type.

--------------------------------------------
 import {createStore} from 'redux';

const store= createStore ((state = {count:0},action) => {

    //access action.type
    return state;
});

 store.dispatch({
     type: 'someaction'
 })

store.subscribe is a function that gets called whenever the state changes.

Action generators -
a function that return action objects. 
Reducers-
 Are pure functions. Outputs are only determined by the inputs given;
 var a= 10;
 const add = (b) => {
     return a+b;
 } // This is not a pure function
 const add1 = (b) => {
     return b+b;
 }// this is a pure function
 
 combineReducers will create multiple functions that define how our redux application changes.

 





----------OFF TOPIC---------------------------------
ES6 Object destructuring
------------------------

person{
    name:"abc",
    location:{
        city,
        temp
    }
}
const {name} = person;
const {city,temp: temperature} = person.location
creating alias using name: new_name
setting up defaults - name
const {name: firstname = 'Anonymous'}

ES6 Array destructuring
-----------------------
const [street, city, state, zip]= address


ES6 object spread install babel plugin


EXPLANATION OF REDUX
----------------------
-----------------------
We have our store.



const store = createStore(
  combineReducers({
    expenses: expensesReducer,
    filters: filtersReducer
  })
);


When we dispatch to the store it is sent as an object with our data as an action.

const expenseOne = store.dispatch(addExpense({ description: "Rent", amount: 100 }));


Dispatch sends our data from addExpense to all reducers (including the user data we added which will propagate our description with Rent and amount with 100).



const addExpense = (
  { 
    description = "", 
    note = "", 
    amount = 0, 
    createdAt = 0
  } = {}
) => ({
  type: "ADD_EXPENSE",
  expense: {
    id: uuid(),
    description,
    note,
    amount,
    createdAt
  }
});


Our reducers get their state and look for the action.type to match up with the dispatch argument passed in. It finds it, which in this case is ADD_EXPENSE and then it returns the case we've set up.

const expensesReducerDefaultState = [];
 
const expensesReducer = (state = expensesReducerDefaultState, action) => {
  switch(action.type){
    case "ADD_EXPENSE":
      return [...state, action.expense];
    case "REMOVE_EXPENSE":
      return state.filter(({id}) => {
        return id !== action.id
      
      });
    default:
    return state;
  }
};


We now have our new state.


//Higher Order components-
A component that renders another component


Install react-redux

PROVIDER
Provider is generally used once to connect with the store

CONNECT
connect (() => {
// about what we want to connect
//function lets us determines what information from the store the component needs to access
//return an object which can used as props

})
call connect with a component

for dates- use airbnb react-dates and moment 
and react-addons-shallow-compare



Redux dev tools
add this line based on github description
 window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()

 Install and set up JEST
 









